import logging, requests
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ChatType

BOT_TOKEN  = "8126274660:AAEEA6x8QUJWVOnM7eZs1mPSVLVxWEVoc2g"
SHEET_ID   = "1qqWJ_DTnGSLdeSd5kni2pSvG17O7yvMSRJ4mWYDlTkk"   # <-- —Ç–≤–æ–π ID —Ç–∞–±–ª–∏—Ü—ã –º–µ–∂–¥—É /d/ –∏ /edit
SHEET_NAME = "–°–¢–ò–õ–¨"

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# --- Google Sheets ---
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
import json, os
service_account_info = json.loads(os.getenv('GOOGLE_SERVICE_KEY'))
creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
GS     = gspread.authorize(creds)
WS     = GS.open_by_key(SHEET_ID).worksheet(SHEET_NAME)

def ts(): return datetime.now().strftime("%Y-%m-%d %H:%M")

def find_row_by_chat_id(chat_id:int):
    for i, v in enumerate(WS.col_values(1), start=1):
        if str(chat_id)==str(v).strip(): return i
    return None

def upsert_user(user):
    chat_id   = user.id
    username  = (user.username or "").lstrip("@")
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    row = find_row_by_chat_id(chat_id)
    if row:
        WS.update(f"C{row}:H{row}", [[full_name, "", "", "", ts(), ""]])
    else:
        WS.append_row([str(chat_id), username, full_name, "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", ts(), ts(), ""])

def get_status(chat_id:int)->str:
    row = find_row_by_chat_id(chat_id)
    if not row: return "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    return (WS.cell(row, 4).value or "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å").strip()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    upsert_user(update.effective_user)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")]])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ë–êZ–ê. –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ¬´–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å¬ª.", reply_markup=kb)

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {get_status(update.effective_user.id)}")

async def on_get_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    for m in [
        "1/5. –í—Å–µ–º –Ω–æ–≤—ã–º ‚Äî ¬´–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å¬ª.",
        "2/5. –ü–∏—Å–∞—Ç—å –º–æ–≥—É—Ç: ¬´–£—á–∞—Å—Ç–Ω–∏–∫¬ª, ¬´–ü–∞—Ä—Ç–Ω—ë—Ä¬ª, ¬´–†–µ–∑–∏–¥–µ–Ω—Ç¬ª.",
        "3/5. –¢–∞—Ä–∏—Ñ—ã: –£—á–∞—Å—Ç–Ω–∏–∫ 2 000‚ÇΩ/–º–µ—Å; –ü–∞—Ä—Ç–Ω—ë—Ä 10 000‚ÇΩ/–º–µ—Å.",
        "4/5. –ù–∞–ø–∏—à–∏ ¬´–•–æ—á—É –¥–æ—Å—Ç—É–ø¬ª ‚Äî –ø—Ä–∏—à–ª—ë–º –æ–ø–ª–∞—Ç—É –∏ –≤–∫–ª—é—á–∏–º –ø—Ä–∞–≤–∞.",
        "5/5. –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é ‚Äî –¥–∞–π–¥–∂–µ—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    ]:
        try: await q.message.chat.send_message(m)
        except: pass

# --- –§–∏–ª—å—Ç—Ä –≤ –≥—Ä—É–ø–ø–µ ---
async def on_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP): return
    upsert_user(update.effective_user)
    if get_status(update.effective_user.id) not in ("–£—á–∞—Å—Ç–Ω–∏–∫","–ü–∞—Ä—Ç–Ω—ë—Ä","–†–µ–∑–∏–¥–µ–Ω—Ç"):
        try: await context.bot.delete_message(update.effective_chat.id, update.effective_message.message_id)
        except: pass
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=("–ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å ¬´–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å¬ª, –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –Ω–µ–ª—å–∑—è.\n"
                      "–ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –≤ /start ‚Äî –ø—Ä–∏—à–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")
            )
        except: pass

def main():
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    r = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe").json()
    if not r.get("ok"): raise SystemExit(f"–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {r}")
    print(f"‚úÖ Telegram OK: @{r['result']['username']}")
    print(f"‚úÖ Sheets OK: –ª–∏—Å—Ç ¬´{SHEET_NAME}¬ª –ø–æ–¥–∫–ª—é—á—ë–Ω")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CallbackQueryHandler(on_get_access, pattern="^get_access$"))
    app.add_handler(MessageHandler(filters.ALL, on_group_message))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
